[build-system]
requires = [
    "hatchling>=1.3.1",
]
build-backend = "hatchling.build"

[project]
name = "fonttools"
description = "Tools to manipulate font files"
readme = "README.rst"
license = "MIT"
requires-python = ">=3.7"
authors = [
    { name = "Just van Rossum", email = "just@letterror.com" },
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Environment :: Other Environment",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Topic :: Text Processing :: Fonts",
]
dynamic = [
    "version",
]

[project.optional-dependencies]
graphite = [
    "lz4 >= 1.7.4.2",
]
interpolatable = [
    "munkres; platform_python_implementation == 'PyPy'",
    "scipy; platform_python_implementation != 'PyPy'",
]
lxml = [
    "lxml >= 4.0",
]
pathops = [
    "skia-pathops >= 0.5.0",
]
plot = [
    "matplotlib",
]
repacker = [
    "uharfbuzz >= 0.23.0",
]
symfont = [
    "sympy",
]
type1 = [
    "xattr; sys_platform == 'darwin'",
]
ufo = [
    "fs >= 2.2.0",
]
unicode = [
    "unicodedata2 >= 14.0.0; python_version < '3.11'",
]
woff = [
    "brotli >= 1.0.1; platform_python_implementation == 'CPython'",
    "brotlicffi >= 0.8.0; platform_python_implementation != 'CPython'",
    "zopfli >= 0.1.4",
]

[project.scripts]
fonttools = "fontTools.__main__:main"
pyftmerge = "fontTools.merge:main"
pyftsubset = "fontTools.subset:main"
ttx = "fontTools.ttx:main"

[project.urls]
Homepage = "http://github.com/fonttools/fonttools"

[tool.hatch.version]
pattern = 'version = __version__ = "(?P<version>.+?)"'
path = "Lib/fontTools/__init__.py"

[tool.hatch.build.targets.wheel]
packages = [
    "Lib/fontTools",
]

[tool.hatch.build.targets.wheel.shared-data]
"Doc/man/man1" = "share/man/man1"

[tool.hatch.build.targets.sdist]
include = [
    "/Lib",
]

[tool.hatch.envs.test]
dependencies = [
    "pytest",
    "pytest-cov",
    "pytest-randomly",
    "freetype-py",
    "ufoLib2",
]

[tool.hatch.envs.test.scripts]
cov = [
    "pytest --cov",
    "coverage html",
]
no-cov = "pytest"

[[tool.hatch.envs.test.matrix]]
python = ["37", "38", "39", "310", "pypy3"]

[tool.hatch.envs.test.overrides]
matrix.python.set-features = [
    { value = "graphite", if = ["37", "38", "39", "310"] },
    "interpolatable",
    "pathops",
    { value = "plot", if = ["37", "38", "39", "310"] },
    "repacker",
    "symfont",
    "type1",
    "ufo",
    "unicode",
    "woff",
    { value = "lxml", if = ["37", "38", "39", "310"] },
]

[tool.hatch.envs.lint]
skip-install = true
dependencies = [
    "mypy>=0.942",
    "interrogate>=1.5.0",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy"
docstrings = "interrogate -v Lib/fontTools"
all = [
    "typing",
    "docstrings",
]

[tool.hatch.envs.docs]
dependencies = [
    "sphinx>=4.3.2",
    "sphinx_rtd_theme>=1.0.0",
    "reportlab>=3.6.5",
    "freetype-py>=2.2.0",
]
features = [
    "interpolatable",
    "pathops",
    "plot",
    "repacker",
    "symfont",
    "type1",
    "ufo",
    "unicode",
    "woff",
]

[tool.hatch.envs.docs.scripts]
make = "sphinx-build -b html Doc/source Doc/build"

[tool.coverage.run]
branch = true
parallel = true
source = [
    "fontTools",
    "Tests",
]

[tool.coverage.paths]
source = [
    "Lib/fontTools",
    "*/site-packages/fontTools",
]

[tool.coverage.report]
exclude_lines = [
    # keywords to use in inline comments to skip coverage
    "pragma: no cover",

    # don't complain if tests don't hit defensive assertion code
    "raise AssertionError",
    "raise NotImplementedError",

    # don't complain if non-runnable code isn't run
    "if 0:",
    "if __name__ == .__main__.:",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-r a",
    "--doctest-modules",
    "--doctest-ignore-import-errors",
    "--pyargs",
]
testpaths = [
    "Tests",
    "Lib/fontTools",
]
python_files = ["*_test.py"]
python_classes = ["*Test"]
doctest_optionflags = [
    "ALLOW_UNICODE",
    "ELLIPSIS",
]
filterwarnings = [
    "ignore:readPlist:DeprecationWarning:plistlib_test",
    "ignore:writePlist:DeprecationWarning:plistlib_test",
    "ignore:some_function:DeprecationWarning:fontTools.ufoLib.utils",
    "ignore::DeprecationWarning:fontTools.varLib.designspace",
]

[tool.interrogate]
ignore-semiprivate = true
ignore-private = true
ignore-nested-functions = true
ignore-regex = "^(from|to)XML$,^(de)?compile$"
ignore-module = true

[tool.mypy]
python_version = "3.7"
files = [
    "Lib/fontTools/misc/plistlib",
]
follow_imports = "silent"
ignore_missing_imports = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "fontTools.misc.plistlib"
strict = true
